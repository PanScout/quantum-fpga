-- C_ALU.vhd
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use IEEE.fixed_pkg.ALL; 
use work.qTypes.ALL;  -- Import the qTypes package

-- Entity Declaration
entity C_ALU is
    Port (
        -- Inputs: Complex Number A and B
        A       : in  cfixed;
        B       : in  cfixed;
        
        Op      : in  std_logic_vector(1 downto 0);
      
        -- Output: Resultant Complex Number
        Result  : out cfixed
    );
end C_ALU;

-- Architecture Definition
architecture Behavioral of C_ALU is

    -- Internal Signals using the fixed subtype
    signal p         : fixed; 
    signal q         : fixed;
    signal r         : fixed;
    signal div_denom : fixed;

begin
    -- Perform Intermediate Calculations
    p          <= resize(A.re * B.re, fixed'high, fixed'low);
    q          <= resize(A.im * B.im, fixed'high, fixed'low);
    r          <= resize((A.re + A.im) * (B.re + B.im), fixed'high, fixed'low);
    div_denom  <= resize((B.re * B.re) + (B.im * B.im), fixed'high, fixed'low);

    -- Real Part Assignment
    with Op select
        Result.re <= resize(A.re + B.re, fixed'high, fixed'low) when "00",  -- ADD
                    resize(A.re - B.re, fixed'high, fixed'low) when "01",  -- SUB
                    resize(p - q, fixed'high, fixed'low)            when "10",  -- MUL
                    resize((resize((A.re * B.re) + (A.im * B.im), fixed'high, fixed'low)) / div_denom, fixed'high, fixed'low) 
                        when "11",  -- DIV
                    (others => '0')                                 when others; -- Default

    -- Imaginary Part Assignment
    with Op select
        Result.im <= resize(A.im + B.im, fixed'high, fixed'low) when "00",  -- ADD
                    resize(A.im - B.im, fixed'high, fixed'low) when "01",  -- SUB
                    resize(r - (p + q), fixed'high, fixed'low)    when "10",  -- MUL
                    resize((resize((A.im * B.re) - (A.re * B.im), fixed'high, fixed'low)) / div_denom, fixed'high, fixed'low) 
                        when "11",  -- DIV
                    (others => '0')                                 when others; -- Default

end Behavioral;

